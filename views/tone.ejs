<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
    <title>Drone</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <script src="https://unpkg.com/@webcomponents/webcomponentsjs@^2/webcomponents-bundle.js"></script>
    <script src='/jQuery/tmp/jquery.js'></script>
    <script src='/tone/build/Tone.js'></script>
    <script src='/lamejs/lame.all.js'></script>
    <!-- <script src='/ffmpeg/lib/ffmpeg.js'></script> -->
    <!-- <script src="./js/tonejs-ui.js"></script> -->
    <style type="text/css">
        tone-button {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <script type="text/javascript">
        $(window).on("keyup", function(e) {
            //load the buffer for use in the convolver
        var player = new Tone.Player().toMaster();
        var buffer;
        var array;
        var wurl = window.location.href
        var specs = wurl.slice(wurl.indexOf("-")+1);
        console.log("specs:" + specs);

        Tone.Offline(function(){
            //only nodes created in this callback will be recorded
            var oscillator = new Tone.Oscillator(specs).toMaster().start(0)
            //schedule their events
        }, 3).then(function(b){
            player.buffer = b;

            player.start();

            //1-dimensional Float32Array

            mp3encoder = new lamejs.Mp3Encoder(2, 44100, 128);
            var mp3Data = [];
            var left = (b.toArray())[0].map(n => n*32768); //one second of silence (get your data from the source you have)

            var right = (b.toArray())[1].map(n => n*32768); //one second of silence (get your data from the source you have)
            sampleBlockSize = 1152; //can be anything but make it a multiple of 576 to make encoders life easier

            for (var i = 0; i < left.length; i += sampleBlockSize) {
              leftChunk = left.slice(i, i + sampleBlockSize);
              rightChunk = right.slice(i, i + sampleBlockSize);
              var mp3buf = mp3encoder.encodeBuffer(leftChunk, rightChunk);
              if (mp3buf.length > 0) {
                mp3Data.push(mp3buf);
              }
            }
            var mp3buf = mp3encoder.flush();   //finish writing mp3

            if (mp3buf.length > 0) {
                mp3Data.push(mp3buf);
            }

            console.log(mp3Data);

            var blob = new Blob(mp3Data, {type: 'audio/mp3'});
            var url = window.URL.createObjectURL(blob);
            console.log('MP3 URl: ', url);

            var saveData = (function () {
                var a = document.createElement("a");
                document.body.appendChild(a);
                a.style = "display: none";
                return function (fileName) {
                    a.href = url;
                    a.download = fileName;
                    a.click();
                    window.URL.revokeObjectURL(url);
                };
            }());

            saveData("hola.mp3");
        })
        })
        
    </script>
</body>
</html>